{% import '_includes/forms.twig' as forms %}

<h2>OAuth Integration</h2>

{% set configOverrides = craft.app.config.getConfigFromFile('oauth') %}
<nav class="tabs">
    <ul>
        <li><a href="#providers-tab" class="sel">Providers</a></li>
        <li><a href="#instructions-tab">Instructions</a></li>
    </ul>
</nav>

<div class="tab-content">
    <div id="providers-tab" class="hidden">
        {% if configOverrides.providers is defined %}
            <p><em>Providers are managed via <code>config/oauth.php</code>. Delete <code>config/oauth.php</code> to manage providers in-admin.</em></p>
            <table class="data fullwidth">
                <thead>
                    <tr>
                        <th>Provider</th>
                        <th>Handle</th>
                        <th>Client ID</th>
                        <th>Client Secret</th>
                        <th>Scopes</th>
                        <th>Auth URL</th>
                        <th>Token URL</th>
                        <th>User Info URL</th>
                        <th>PKCE</th>
                    </tr>
                </thead>
                <tbody>
                    {% for row in configOverrides.providers %}
                        <tr>
                            <td>{{ row.provider ?? '—' }}</td>
                            <td>{{ row.handle ?? '—' }}</td>
                            <td><code>{{ row.clientId ?? '—' }}</code></td>
                            <td><code>{{ row.clientSecret }}</code></td>
                            <td>{{ row.scopes ?? '—' }}</td>
                            <td>{{ row.authUrl ?? '—' }}</td>
                            <td>{{ row.tokenUrl ?? '—' }}</td>
                            <td>{{ row.userInfoUrl ?? '—' }}</td>
                            <td>{{ row.pkce ? 'Yes' : 'No' }}</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% else %}
            {{ forms.editableTableField({
                label: 'Providers',
                name: 'providers',
                instructions: 'Add OAuth providers with client credentials. Choose "Custom" to specify your own URLs. Enable PKCE if required.',
                id: 'providers',
                cols: {
                    provider: {
                        heading: 'Provider',
                        type: 'select',
                        options: [
                            { label: 'Google', value: 'google' },
                            { label: 'GitHub', value: 'github' },
                            { label: 'Facebook', value: 'facebook' },
                            { label: 'Instagram', value: 'instagram' },
                            { label: 'LinkedIn', value: 'linkedin' },
                            { label: 'Custom', value: 'custom' }
                        ],
                        required: true
                    },
                    handle: { heading: 'Handle', type: 'singleline', required: true },
                    clientId: { heading: 'Client ID', type: 'singleline', required: true },
                    clientSecret: { heading: 'Client Secret', type: 'singleline', required: true },
                    scopes: { heading: 'Scopes (comma-separated)', type: 'singleline' },
                    authUrl: { heading: 'Auth URL', type: 'singleline' },
                    tokenUrl: { heading: 'Token URL', type: 'singleline' },
                    userInfoUrl: { heading: 'User Info URL', type: 'singleline' },
                    pkce: { heading: 'PKCE', type: 'lightswitch' },
                },
                rows: settings.providers ?? [],
                allowAdd: true,
                allowReorder: true,
                allowDelete: true,
            }) }}
        {% endif %}
    </div>

    <div id="instructions-tab" class="hidden">
        <div class="pane">
            <h3>Where to Create OAuth Applications</h3>
            <p>To enable OAuth login, you'll need to register your application with each provider. Use the following links and instructions to obtain your <strong>Client ID</strong> and <strong>Client Secret</strong>.</p>

            <ul style="display: flex; align-items: flex-start; justify-content: flex-start; gap: 20px; flex-wrap: wrap;">
                <li style="background-color: #fcfcfc; padding: 10px; border-radius: 5px; box-shadow: 0 2px 4px 0 rgba(0,0,0,0.1); border: 1px solid rgba(0,0,0,0.1);">
                    <strong>Google</strong><br>
                    <a href="https://console.developers.google.com/apis/credentials" target="_blank">Google API Console</a><br>
                    <em>Steps:</em>
                    <ol>
                        <li>Create a new project (or select an existing one).</li>
                        <li>Go to <strong>OAuth Consent Screen</strong> and configure your app details.</li>
                        <li>Go to <strong>Credentials</strong> > <strong>Create Credentials</strong> > <strong>OAuth Client ID</strong>.</li>
                        <li>Select <code>Web Application</code> and add your redirect URI:</li>
                        <li><code>{{ siteUrl('oauth/callback/google') }}</code></li>
                    </ol>
                </li>

                <li style="background-color: #fcfcfc; padding: 10px; border-radius: 5px; box-shadow: 0 2px 4px 0 rgba(0,0,0,0.1); border: 1px solid rgba(0,0,0,0.1);">
                    <strong>GitHub</strong><br>
                    <a href="https://github.com/settings/developers" target="_blank">GitHub Developer Settings</a><br>
                    <em>Steps:</em>
                    <ol>
                        <li>Go to <strong>OAuth Apps</strong> and click <strong>New OAuth App</strong>.</li>
                        <li>Set your app name and homepage URL.</li>
                        <li>Set <strong>Authorization callback URL</strong> to:</li>
                        <li><code>{{ siteUrl('oauth/callback/github') }}</code></li>
                    </ol>
                </li>

                <li style="background-color: #fcfcfc; padding: 10px; border-radius: 5px; box-shadow: 0 2px 4px 0 rgba(0,0,0,0.1); border: 1px solid rgba(0,0,0,0.1);">
                    <strong>Facebook</strong><br>
                    <a href="https://developers.facebook.com/apps/" target="_blank">Facebook Developer Console</a><br>
                    <em>Steps:</em>
                    <ol>
                        <li>Create a new app in the console.</li>
                        <li>Add the <strong>Facebook Login</strong> product.</li>
                        <li>Under <strong>Settings > Basic</strong>, get your <strong>App ID</strong> and <strong>App Secret</strong>.</li>
                        <li>Under <strong>Facebook Login > Settings</strong>, set <strong>Valid OAuth Redirect URIs</strong> to:</li>
                        <li><code>{{ siteUrl('oauth/callback/facebook') }}</code></li>
                    </ol>
                </li>

                <li style="background-color: #fcfcfc; padding: 10px; border-radius: 5px; box-shadow: 0 2px 4px 0 rgba(0,0,0,0.1); border: 1px solid rgba(0,0,0,0.1);">
                    <strong>Instagram</strong><br>
                    <a href="https://developers.facebook.com/apps/" target="_blank">Instagram via Facebook App</a><br>
                    <em>Steps:</em>
                    <ol>
                        <li>Instagram requires a Facebook App with <strong>Instagram Basic Display</strong>.</li>
                        <li>Go to <strong>Add Product > Instagram Basic Display</strong>.</li>
                        <li>Configure your app and add a redirect URI:</li>
                        <li><code>{{ siteUrl('oauth/callback/instagram') }}</code></li>
                    </ol>
                </li>

                <li style="background-color: #fcfcfc; padding: 10px; border-radius: 5px; box-shadow: 0 2px 4px 0 rgba(0,0,0,0.1); border: 1px solid rgba(0,0,0,0.1);">
                    <strong>LinkedIn</strong><br>
                    <a href="https://www.linkedin.com/developers/apps" target="_blank">LinkedIn Developer Portal</a><br>
                    <em>Steps:</em>
                    <ol>
                        <li>Create a new LinkedIn app.</li>
                        <li>Go to <strong>Auth</strong> > <strong>Redirect URLs</strong>.</li>
                        <li>Add the following URL:</li>
                        <li><code>{{ siteUrl('oauth/callback/linkedin') }}</code></li>
                        <li>Get your <strong>Client ID</strong> and <strong>Client Secret</strong> under <strong>Auth</strong>.</li>
                    </ol>
                </li>
            </ul>

            <p class="light">Note: Replace <code>{{ siteUrl() }}</code> with your actual site URL in production.</p>
        </div>
    </div>
</div>

<script>
// Initialize tabs
document.addEventListener('DOMContentLoaded', function () {
    const tabLinks = document.querySelectorAll('.tabs a');
    const tabContents = document.querySelectorAll('.tab-content > div');

    tabLinks.forEach(link => {
        link.addEventListener('click', function (e) {
            e.preventDefault();
            tabLinks.forEach(l => l.classList.remove('sel'));
            tabContents.forEach(c => c.classList.add('hidden'));

            this.classList.add('sel');
            const target = document.querySelector(this.getAttribute('href'));
            target.classList.remove('hidden');
        });
    });

    // Show first tab on load
    if (tabContents.length) {
        tabContents[0].classList.remove('hidden');
    }
});

// Prefill logic (same as before)
(function() {
    const defaults = {
        google: { scopes: 'email, profile', authUrl: 'https://accounts.google.com/o/oauth2/auth', tokenUrl: 'https://oauth2.googleapis.com/token', userInfoUrl: 'https://openidconnect.googleapis.com/v1/userinfo' },
        github: { scopes: 'read:user, user:email', authUrl: 'https://github.com/login/oauth/authorize', tokenUrl: 'https://github.com/login/oauth/access_token', userInfoUrl: 'https://api.github.com/user' },
        facebook: { scopes: 'email', authUrl: 'https://www.facebook.com/v11.0/dialog/oauth', tokenUrl: 'https://graph.facebook.com/v11.0/oauth/access_token', userInfoUrl: 'https://graph.facebook.com/me?fields=id,name,email' },
        instagram: { scopes: 'user_profile', authUrl: 'https://api.instagram.com/oauth/authorize', tokenUrl: 'https://api.instagram.com/oauth/access_token', userInfoUrl: 'https://graph.instagram.com/me?fields=id,username' },
        linkedin: { scopes: 'r_liteprofile, r_emailaddress', authUrl: 'https://www.linkedin.com/oauth/v2/authorization', tokenUrl: 'https://www.linkedin.com/oauth/v2/accessToken', userInfoUrl: 'https://api.linkedin.com/v2/me' }
    };

    const table = document.getElementById('settings-providers');
    if (!table) return;
    const tbody = table.querySelector('tbody');

    function findField(row, fieldName) {
        return row.querySelector(`[name*="[${fieldName}]"]`);
    }

    function prefillDefaults(row, providerValue) {
        const scopesField = findField(row, 'scopes');
        const authUrlField = findField(row, 'authUrl');
        const tokenUrlField = findField(row, 'tokenUrl');
        const userInfoUrlField = findField(row, 'userInfoUrl');
        const handleField = findField(row, 'handle');

        if (defaults[providerValue]) {
            const config = defaults[providerValue];
            if (scopesField) scopesField.value = config.scopes;
            if (authUrlField) authUrlField.value = config.authUrl;
            if (tokenUrlField) tokenUrlField.value = config.tokenUrl;
            if (userInfoUrlField) userInfoUrlField.value = config.userInfoUrl;
            if (handleField) {
                handleField.readOnly = true;
                handleField.value = providerValue;
            }
        } else if (providerValue === 'custom') {
            if (handleField) handleField.readOnly = false;
        }
    }

    tbody.addEventListener('change', function(event) {
        if (event.target.name.includes('[provider]')) {
            const row = event.target.closest('tr');
            prefillDefaults(row, event.target.value);
        }
    });

    const observer = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
            mutation.addedNodes.forEach(node => {
                if (node.nodeType === 1 && node.matches('tr')) {
                    const providerSelect = findField(node, 'provider');
                    if (providerSelect) prefillDefaults(node, providerSelect.value);
                }
            });
        });
    });

    observer.observe(tbody, { childList: true });

    Array.from(tbody.rows).forEach(row => {
        const providerSelect = findField(row, 'provider');
        if (providerSelect) prefillDefaults(row, providerSelect.value);
    });
})();
</script>